<?php
namespace NaiveUserState;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

class UserStateMiddleware implements MiddlewareInterface
{

    /**
     * @var CookieResponseService
     */
    private $cookie_response_service;

    public function __construct(CookieResponseService $cookie_response_service)
    {

        $this->cookie_response_service = $cookie_response_service;
    }

    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        $this->initiatePhpSession($request);

        $response = $handler->handle($request);

        $response = $this->addPhpSessionCookie($response);

        $response = $this->addCustomCookies($response);

        return $response;
    }

    private function addCustomCookies(ResponseInterface $response): ResponseInterface
    {
        /* @var $cookie Cookie */
        foreach ($this->cookie_response_service->listCookies() as $cookie) {
            $cookie_value = CookieHeaderCreator::getHeaderValue($cookie->getName(), $cookie->getValue());
            // Multiple Set-Cookie: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#The_Set-Cookie_and_Cookie_headers
            $response = $response->withAddedHeader(CookieHeaderCreator::HEADER_NAME, $cookie_value);
        }

        return $response;
    }

    /**
     * Starts PHP session support, and disables the default autogenerated headers.
     * The directive session.auto_start should be turned off (default).
     */
    private function initiatePhpSession(ServerRequestInterface $request): void
    {
        $options = [
            'cache_limiter' => '', // Disable cache headers http://php.net/manual/en/function.session-cache-limiter.php
            'use_cookies' => 0, // Prevent PHP writing the session cookie
            'use_only_cookies' => 1, // Only fetch session id from cookie
        ];

        $cookie = $request->getCookieParams();
        if (isset($cookie[session_name()])) {
            session_id($cookie[session_name()]);
        }

        session_start($options);
    }

    /**
     * Session cookie generated based on PHP configuration.
     * @see http://php.net/manual/en/session.configuration.php
     */
    private function addPhpSessionCookie(ResponseInterface $response): ResponseInterface
    {
        $cookie_params = session_get_cookie_params();

        $expires = $cookie_params['lifetime'] ? time() + $cookie_params['lifetime'] : 0;
        $path = $cookie_params['path'];
        $domain = $cookie_params['domain'];
        $secure = $cookie_params['secure'];
        $httponly = $cookie_params['httponly'];
        $same_site = $cookie_params['samesite'] ?? ''; // PHP 7.3.0

        $cookie_value = CookieHeaderCreator::getHeaderValue(
                session_name(),
                session_id(),
                $expires,
                $path,
                $domain,
                $secure,
                $httponly,
                $same_site
        );

        $response = $response->withAddedHeader(CookieHeaderCreator::HEADER_NAME, $cookie_value);

        return $response;
    }
}
