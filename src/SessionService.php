<?php
namespace NaivePhpState;

use Psr\Http\Message\ServerRequestInterface;

class SessionService
{

    /**
     * @var ServerRequestInterface
     */
    private $request;

    public function __construct(ServerRequestInterface $request)
    {

        $this->request = $request;
    }

    /**
     * Starts PHP session support, and disables the default autogenerated headers.
     * The directive session.auto_start should be turned off (default).
     */
    public function start(): void
    {
        // Session security: http://php.net/manual/en/session.security.ini.php

        $options = [
            // Disable cache headers http://php.net/manual/en/function.session-cache-limiter.php
            'cache_limiter' => '',
            // Prevent PHP writing the session cookie
            'use_cookies' => 0,
            // Only fetch session id from cookie
            'use_only_cookies' => 1,
            // Session ID may leak from bookmarked URL if on
            'use_trans_sid' => 0,
            // If uninitialized session ID is sent from browser, new session ID is sent to browser. 
            // Applications are protected from session fixation via session adoption with strict mode.
            //'use_strict_mode' => 1 
        ];

        $client_session_id = $this->getClientSessionId();
        if ($client_session_id !== null) {
            session_id($client_session_id);
        }

        session_start($options);
    }

    public function getClientSessionId(): ?string
    {
        $session_id = null;
        $cookie = $this->request->getCookieParams();
        if (isset($cookie[session_name()])) {
            $session_id = $cookie[session_name()];
        }
        return $session_id;
    }
}
