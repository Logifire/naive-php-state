<?php
namespace NaivePhpState;

use NaivePhpState\Utility\ResponseCookieHandler;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

class PhpStateMiddleware implements MiddlewareInterface
{

    /**
     * @var ResponseCookieHandler
     */
    private $response_cookie_handler;

    public function __construct(ResponseCookieHandler $response_cookie_handler)
    {
        $this->response_cookie_handler = $response_cookie_handler;
    }

    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        $this->initiatePhpSession($request);

        $response = $handler->handle($request);

        $client_sesion_id = $this->response_cookie_handler->getClientSessionId($request);

        $response = $this->response_cookie_handler->handleClientSessionId($response, $client_sesion_id);

        $response = $this->response_cookie_handler->addCustomCookies($response);

        if (session_status() == PHP_SESSION_ACTIVE) {
            session_write_close();
        }

        return $response;
    }

    /**
     * Starts PHP session support, and disables the default autogenerated headers.
     * The directive session.auto_start should be turned off (default).
     */
    private function initiatePhpSession(ServerRequestInterface $request): void
    {
        // Session security: http://php.net/manual/en/session.security.ini.php
        $options = [
            // Disable cache headers http://php.net/manual/en/function.session-cache-limiter.php
            'cache_limiter' => '',
            // Prevent PHP writing the session cookie
            'use_cookies' => 0,
            // Only fetch session id from cookie
            'use_only_cookies' => 1,
            // Session ID may leak from bookmarked URL if on
            'use_trans_sid' => 0,
            // If uninitialized session ID is sent from browser, new session ID is sent to browser. 
            // Applications are protected from session fixation via session adoption with strict mode.
            //'use_strict_mode' => 1 
        ];

        $client_session_id = $this->response_cookie_handler->getClientSessionId($request);
        if ($client_session_id !== null) {
            session_id($client_session_id);
        }

        session_start($options);
    }
}
